{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "112b7811",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2023-03-11T02:47:38.428983Z",
     "iopub.status.busy": "2023-03-11T02:47:38.428607Z",
     "iopub.status.idle": "2023-03-11T02:47:47.506725Z",
     "shell.execute_reply": "2023-03-11T02:47:47.505171Z"
    },
    "papermill": {
     "duration": 9.086971,
     "end_time": "2023-03-11T02:47:47.509879",
     "exception": false,
     "start_time": "2023-03-11T02:47:38.422908",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#all necessary libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "16fe703d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-11T02:47:47.518703Z",
     "iopub.status.busy": "2023-03-11T02:47:47.518044Z",
     "iopub.status.idle": "2023-03-11T02:47:51.754258Z",
     "shell.execute_reply": "2023-03-11T02:47:51.752456Z"
    },
    "papermill": {
     "duration": 4.243524,
     "end_time": "2023-03-11T02:47:51.757002",
     "exception": false,
     "start_time": "2023-03-11T02:47:47.513478",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(42000, 785)\n",
      "(28000, 784)\n"
     ]
    }
   ],
   "source": [
    "#read the train and test data\n",
    "train_dataset = pd.read_csv(\"../input/digit-recognizer/train.csv\")\n",
    "test_dataset  = pd.read_csv(\"../input/digit-recognizer/test.csv\")\n",
    "print(train_dataset.shape)\n",
    "print(test_dataset.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e7f2a7f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-11T02:47:51.766365Z",
     "iopub.status.busy": "2023-03-11T02:47:51.765874Z",
     "iopub.status.idle": "2023-03-11T02:47:51.776043Z",
     "shell.execute_reply": "2023-03-11T02:47:51.774119Z"
    },
    "papermill": {
     "duration": 0.017696,
     "end_time": "2023-03-11T02:47:51.778466",
     "exception": false,
     "start_time": "2023-03-11T02:47:51.760770",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(42000, 784)\n",
      "(42000,)\n"
     ]
    }
   ],
   "source": [
    "#explore the data and data-preprocessing\n",
    "X_train_pixels = train_dataset.iloc[:, 1:]\n",
    "y_train_lables = train_dataset.iloc[:,0].astype('int32')\n",
    "print(X_train_pixels.shape)\n",
    "print(y_train_lables.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "af5144d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-11T02:47:51.787160Z",
     "iopub.status.busy": "2023-03-11T02:47:51.786758Z",
     "iopub.status.idle": "2023-03-11T02:47:51.888333Z",
     "shell.execute_reply": "2023-03-11T02:47:51.886127Z"
    },
    "papermill": {
     "duration": 0.108989,
     "end_time": "2023-03-11T02:47:51.890955",
     "exception": false,
     "start_time": "2023-03-11T02:47:51.781966",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(42000, 28, 28, 1)\n",
      "(28000, 28, 28, 1)\n"
     ]
    }
   ],
   "source": [
    "X_train_pixels = X_train_pixels.values.reshape(-1,28,28,1)\n",
    "X_train_pixels = X_train_pixels/255.0\n",
    "X_test_pixels = test_dataset.values.reshape(-1,28,28,1)\n",
    "X_test_pixels = X_test_pixels/255.0\n",
    "print(X_train_pixels.shape)\n",
    "print(X_test_pixels.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2f65f646",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-11T02:47:51.900007Z",
     "iopub.status.busy": "2023-03-11T02:47:51.899616Z",
     "iopub.status.idle": "2023-03-11T02:47:51.906405Z",
     "shell.execute_reply": "2023-03-11T02:47:51.905213Z"
    },
    "papermill": {
     "duration": 0.014337,
     "end_time": "2023-03-11T02:47:51.908913",
     "exception": false,
     "start_time": "2023-03-11T02:47:51.894576",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(42000, 10)\n"
     ]
    }
   ],
   "source": [
    "#explore the data and data-preprocessing\n",
    "#reshappinng the target(lable) dataset, equivalent to the train dataset. \n",
    "#here, the target data is categorized as the number of (classes) digits are 0-9\n",
    "#and that's where keras.utils.to_categorical is used\n",
    "y_train_lables = tf.keras.utils.to_categorical(y_train_lables,10)\n",
    "print(y_train_lables.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5105ebc2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-11T02:47:51.918912Z",
     "iopub.status.busy": "2023-03-11T02:47:51.918563Z",
     "iopub.status.idle": "2023-03-11T02:47:52.099283Z",
     "shell.execute_reply": "2023-03-11T02:47:52.097831Z"
    },
    "papermill": {
     "duration": 0.189146,
     "end_time": "2023-03-11T02:47:52.101899",
     "exception": false,
     "start_time": "2023-03-11T02:47:51.912753",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0. 0. 0. 1. 0. 0. 0. 0. 0. 0.]\n"
     ]
    },
    {
     "data": {
      "image/png": "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1NLSopaWFp05c0aSdOrUKT3xxBP629/+pg8//FC1tbWaMWOGhgwZonvvvTcrfwEAQO7yuhJav369JGny5Mkp6zds2KB58+apb9++Onz4sDZu3KiTJ08qGo1qypQp2rp1q0KhUMaGBgD0DN7/HHclAwcO1CuvvPKFBgIA9B7cRRsAkFHcRRsAkBMoIQCAGUoIAGCGEgIAmKGEAABmKCEAgBlKCABghhICAJihhAAAZighAIAZSggAYIYSAgCYoYQAAGYoIQCAGUoIAGCGEgIAmKGEAABmKCEAgBlKCABghhICAJihhAAAZighAIAZSggAYIYSAgCY6Wc9wKWcc5KkeDxuPAkAIB0XX78vvp5fSbcrofb2dklScXGx8SQAgC+ivb1d4XD4itsE3LVUVRc6f/68jh8/rlAopEAgkPJcPB5XcXGxmpqalJeXZzShPY7DBRyHCzgOF3AcLugOx8E5p/b2dhUVFalPnyu/69PtroT69OmjoUOHXnGbvLy8Xn2SXcRxuIDjcAHH4QKOwwXWx+FqV0AX8cEEAIAZSggAYCanSigYDGrZsmUKBoPWo5jiOFzAcbiA43ABx+GCXDsO3e6DCQCA3iOnroQAAD0LJQQAMEMJAQDMUEIAADM5VULr1q1TaWmpvvSlL+nWW2/V66+/bj1Sl1q+fLkCgUDKEolErMfKur1792rGjBkqKipSIBDQtm3bUp53zmn58uUqKirSwIEDNXnyZB05csRm2Cy62nGYN29ep/Nj3LhxNsNmSXV1tW677TaFQiEVFBRo5syZev/991O26Q3nw7Uch1w5H3KmhLZu3apFixZp6dKlOnjwoCZOnKjKyko1NjZaj9albrzxRjU3NyeXw4cPW4+UdR0dHRo9erTWrl172edXrVql1atXa+3atdq/f78ikYimTZuWvA9hT3G14yBJ06dPTzk/du3a1YUTZl9dXZ3mz5+v+vp61dTU6Ny5c6qoqFBHR0dym95wPlzLcZBy5HxwOeL22293jzzySMq6G264wf34xz82mqjrLVu2zI0ePdp6DFOS3EsvvZR8fP78eReJRNzKlSuT6z755BMXDofdr371K4MJu8alx8E55+bOneu+9a1vmcxjpbW11UlydXV1zrneez5cehycy53zISeuhM6ePasDBw6ooqIiZX1FRYX27dtnNJWNo0ePqqioSKWlpbrvvvt07Ngx65FMNTQ0qKWlJeXcCAaDuuOOO3rduSFJtbW1Kigo0MiRI/XQQw+ptbXVeqSsisVikqT8/HxJvfd8uPQ4XJQL50NOlNCJEyf06aefqrCwMGV9YWGhWlpajKbqemPHjtXGjRv1yiuv6JlnnlFLS4vKy8vV1tZmPZqZi//9e/u5IUmVlZXatGmTdu/eraefflr79+/X1KlTlUgkrEfLCuecqqqqNGHCBJWVlUnqnefD5Y6DlDvnQ7e7i/aVXPrVDs65Tut6ssrKyuSfb7rpJo0fP17Dhw/Xs88+q6qqKsPJ7PX2c0OS5syZk/xzWVmZxowZo5KSEu3cuVOzZs0ynCw7FixYoHfeeUdvvPFGp+d60/nwecchV86HnLgSGjJkiPr27dvp/2RaW1s7/R9PbzJ48GDddNNNOnr0qPUoZi5+OpBzo7NoNKqSkpIeeX4sXLhQ27dv1549e1K++qW3nQ+fdxwup7ueDzlRQgMGDNCtt96qmpqalPU1NTUqLy83mspeIpHQe++9p2g0aj2KmdLSUkUikZRz4+zZs6qrq+vV54YktbW1qampqUedH845LViwQC+++KJ2796t0tLSlOd7y/lwteNwOd32fDD8UISX559/3vXv39/97ne/c++++65btGiRGzx4sPvwww+tR+syjz/+uKutrXXHjh1z9fX17p577nGhUKjHH4P29nZ38OBBd/DgQSfJrV692h08eNB99NFHzjnnVq5c6cLhsHvxxRfd4cOH3f333++i0aiLx+PGk2fWlY5De3u7e/zxx92+fftcQ0OD27Nnjxs/frz7yle+0qOOw6OPPurC4bCrra11zc3NyeX06dPJbXrD+XC145BL50POlJBzzv3yl790JSUlbsCAAe6WW25J+ThibzBnzhwXjUZd//79XVFRkZs1a5Y7cuSI9VhZt2fPHiep0zJ37lzn3IWP5S5btsxFIhEXDAbdpEmT3OHDh22HzoIrHYfTp0+7iooKd/3117v+/fu7YcOGublz57rGxkbrsTPqcn9/SW7Dhg3JbXrD+XC145BL5wNf5QAAMJMT7wkBAHomSggAYIYSAgCYoYQAAGYoIQCAGUoIAGCGEgIAmKGEAABmKCEAgBlKCABghhICAJihhAAAZv4Pa9qahQ2kqEEAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(X_train_pixels[7], cmap=\"binary\")\n",
    "print(y_train_lables[7])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "efb59a33",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-11T02:47:52.111221Z",
     "iopub.status.busy": "2023-03-11T02:47:52.110849Z",
     "iopub.status.idle": "2023-03-11T02:47:52.377668Z",
     "shell.execute_reply": "2023-03-11T02:47:52.376706Z"
    },
    "papermill": {
     "duration": 0.274442,
     "end_time": "2023-03-11T02:47:52.380322",
     "exception": false,
     "start_time": "2023-03-11T02:47:52.105880",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model = tf.keras.models.Sequential([\n",
    "  tf.keras.layers.Conv2D(32,(3,3),activation = 'relu', input_shape=(28,28,1)),\n",
    "  tf.keras.layers.Conv2D(32,(3,3),activation = 'relu'),\n",
    "  tf.keras.layers.MaxPooling2D(2,2),\n",
    "  tf.keras.layers.Conv2D(64,(3,3),activation = 'relu',padding = 'Same'),\n",
    "  tf.keras.layers.Conv2D(64,(3,3),activation = 'relu',padding = 'Same'),\n",
    "  tf.keras.layers.MaxPooling2D(pool_size = (2,2), strides = (2,2)),\n",
    "  tf.keras.layers.Dropout(0.25),\n",
    "  tf.keras.layers.Conv2D(64,(3,3),activation = 'relu',padding = 'Same'),\n",
    "  tf.keras.layers.Conv2D(64,(3,3),activation = 'relu',padding = 'Same'),\n",
    "  tf.keras.layers.MaxPooling2D(pool_size = (2,2), strides = (2,2)),\n",
    "  tf.keras.layers.Dropout(0.25),\n",
    "  tf.keras.layers.Flatten(),\n",
    "  tf.keras.layers.Dense(256, activation='relu'),\n",
    "  tf.keras.layers.Dropout(0.50),\n",
    "  tf.keras.layers.Dense(10, activation='softmax')\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c4282577",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-11T02:47:52.389846Z",
     "iopub.status.busy": "2023-03-11T02:47:52.389447Z",
     "iopub.status.idle": "2023-03-11T02:47:52.445593Z",
     "shell.execute_reply": "2023-03-11T02:47:52.444509Z"
    },
    "papermill": {
     "duration": 0.063346,
     "end_time": "2023-03-11T02:47:52.447647",
     "exception": false,
     "start_time": "2023-03-11T02:47:52.384301",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " conv2d (Conv2D)             (None, 26, 26, 32)        320       \n",
      "                                                                 \n",
      " conv2d_1 (Conv2D)           (None, 24, 24, 32)        9248      \n",
      "                                                                 \n",
      " max_pooling2d (MaxPooling2D  (None, 12, 12, 32)       0         \n",
      " )                                                               \n",
      "                                                                 \n",
      " conv2d_2 (Conv2D)           (None, 12, 12, 64)        18496     \n",
      "                                                                 \n",
      " conv2d_3 (Conv2D)           (None, 12, 12, 64)        36928     \n",
      "                                                                 \n",
      " max_pooling2d_1 (MaxPooling  (None, 6, 6, 64)         0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " dropout (Dropout)           (None, 6, 6, 64)          0         \n",
      "                                                                 \n",
      " conv2d_4 (Conv2D)           (None, 6, 6, 64)          36928     \n",
      "                                                                 \n",
      " conv2d_5 (Conv2D)           (None, 6, 6, 64)          36928     \n",
      "                                                                 \n",
      " max_pooling2d_2 (MaxPooling  (None, 3, 3, 64)         0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " dropout_1 (Dropout)         (None, 3, 3, 64)          0         \n",
      "                                                                 \n",
      " flatten (Flatten)           (None, 576)               0         \n",
      "                                                                 \n",
      " dense (Dense)               (None, 256)               147712    \n",
      "                                                                 \n",
      " dropout_2 (Dropout)         (None, 256)               0         \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 10)                2570      \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 289,130\n",
      "Trainable params: 289,130\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8c2fba7b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-11T02:47:52.462101Z",
     "iopub.status.busy": "2023-03-11T02:47:52.461646Z",
     "iopub.status.idle": "2023-03-11T02:47:52.482407Z",
     "shell.execute_reply": "2023-03-11T02:47:52.480942Z"
    },
    "papermill": {
     "duration": 0.031375,
     "end_time": "2023-03-11T02:47:52.485325",
     "exception": false,
     "start_time": "2023-03-11T02:47:52.453950",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "Optimizer = tf.keras.optimizers.Adam(\n",
    "            learning_rate=0.0005, \n",
    "            beta_1=0.9, \n",
    "            beta_2=0.999, \n",
    "            epsilon=1e-07,\n",
    "            name='Adam'\n",
    ")\n",
    "model.compile(optimizer=Optimizer, loss='categorical_crossentropy', metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c6882001",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-11T02:47:52.499653Z",
     "iopub.status.busy": "2023-03-11T02:47:52.499286Z",
     "iopub.status.idle": "2023-03-11T03:13:24.614560Z",
     "shell.execute_reply": "2023-03-11T03:13:24.613702Z"
    },
    "papermill": {
     "duration": 1532.124821,
     "end_time": "2023-03-11T03:13:24.616493",
     "exception": false,
     "start_time": "2023-03-11T02:47:52.491672",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/25\n",
      "1313/1313 [==============================] - 63s 47ms/step - loss: 0.3059 - accuracy: 0.8996\n",
      "Epoch 2/25\n",
      "1313/1313 [==============================] - 61s 46ms/step - loss: 0.0806 - accuracy: 0.9753\n",
      "Epoch 3/25\n",
      "1313/1313 [==============================] - 61s 46ms/step - loss: 0.0620 - accuracy: 0.9817\n",
      "Epoch 4/25\n",
      "1313/1313 [==============================] - 60s 46ms/step - loss: 0.0452 - accuracy: 0.9868\n",
      "Epoch 5/25\n",
      "1313/1313 [==============================] - 60s 46ms/step - loss: 0.0403 - accuracy: 0.9878\n",
      "Epoch 6/25\n",
      "1313/1313 [==============================] - 60s 46ms/step - loss: 0.0311 - accuracy: 0.9906\n",
      "Epoch 7/25\n",
      "1313/1313 [==============================] - 60s 46ms/step - loss: 0.0303 - accuracy: 0.9904\n",
      "Epoch 8/25\n",
      "1313/1313 [==============================] - 61s 46ms/step - loss: 0.0258 - accuracy: 0.9920\n",
      "Epoch 9/25\n",
      "1313/1313 [==============================] - 60s 46ms/step - loss: 0.0236 - accuracy: 0.9926\n",
      "Epoch 10/25\n",
      "1313/1313 [==============================] - 61s 47ms/step - loss: 0.0219 - accuracy: 0.9936\n",
      "Epoch 11/25\n",
      "1313/1313 [==============================] - 61s 46ms/step - loss: 0.0197 - accuracy: 0.9937\n",
      "Epoch 12/25\n",
      "1313/1313 [==============================] - 61s 46ms/step - loss: 0.0178 - accuracy: 0.9944\n",
      "Epoch 13/25\n",
      "1313/1313 [==============================] - 62s 47ms/step - loss: 0.0175 - accuracy: 0.9946\n",
      "Epoch 14/25\n",
      "1313/1313 [==============================] - 63s 48ms/step - loss: 0.0179 - accuracy: 0.9947\n",
      "Epoch 15/25\n",
      "1313/1313 [==============================] - 63s 48ms/step - loss: 0.0135 - accuracy: 0.9957\n",
      "Epoch 16/25\n",
      "1313/1313 [==============================] - 61s 47ms/step - loss: 0.0150 - accuracy: 0.9955\n",
      "Epoch 17/25\n",
      "1313/1313 [==============================] - 61s 46ms/step - loss: 0.0125 - accuracy: 0.9960\n",
      "Epoch 18/25\n",
      "1313/1313 [==============================] - 61s 47ms/step - loss: 0.0125 - accuracy: 0.9961\n",
      "Epoch 19/25\n",
      "1313/1313 [==============================] - 62s 48ms/step - loss: 0.0128 - accuracy: 0.9960\n",
      "Epoch 20/25\n",
      "1313/1313 [==============================] - 63s 48ms/step - loss: 0.0124 - accuracy: 0.9960\n",
      "Epoch 21/25\n",
      "1313/1313 [==============================] - 62s 47ms/step - loss: 0.0088 - accuracy: 0.9973\n",
      "Epoch 22/25\n",
      "1313/1313 [==============================] - 61s 47ms/step - loss: 0.0124 - accuracy: 0.9964\n",
      "Epoch 23/25\n",
      "1313/1313 [==============================] - 61s 47ms/step - loss: 0.0105 - accuracy: 0.9969\n",
      "Epoch 24/25\n",
      "1313/1313 [==============================] - 61s 47ms/step - loss: 0.0095 - accuracy: 0.9969\n",
      "Epoch 25/25\n",
      "1313/1313 [==============================] - 61s 46ms/step - loss: 0.0084 - accuracy: 0.9972\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x7f88678fff50>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(X_train_pixels, y_train_lables, epochs = 25, shuffle = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5bfb7a67",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-11T03:13:26.743258Z",
     "iopub.status.busy": "2023-03-11T03:13:26.742454Z",
     "iopub.status.idle": "2023-03-11T03:13:38.504701Z",
     "shell.execute_reply": "2023-03-11T03:13:38.503874Z"
    },
    "papermill": {
     "duration": 12.859528,
     "end_time": "2023-03-11T03:13:38.506638",
     "exception": false,
     "start_time": "2023-03-11T03:13:25.647110",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "875/875 [==============================] - 11s 13ms/step\n",
      "[2 0 9 ... 3 9 2]\n",
      "(28000,)\n",
      "9\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f8867823fd0>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_pred = model.predict(X_test_pixels)\n",
    "y_pred = np.argmax(y_pred, axis = 1) \n",
    "print(y_pred)\n",
    "print(y_pred.shape)\n",
    "print(y_pred[2])\n",
    "plt.imshow(X_test_pixels[2],cmap=\"binary\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5490aed5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-11T03:13:40.741095Z",
     "iopub.status.busy": "2023-03-11T03:13:40.740738Z",
     "iopub.status.idle": "2023-03-11T03:13:40.804813Z",
     "shell.execute_reply": "2023-03-11T03:13:40.803618Z"
    },
    "papermill": {
     "duration": 1.179424,
     "end_time": "2023-03-11T03:13:40.807131",
     "exception": false,
     "start_time": "2023-03-11T03:13:39.627707",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "sample_submission = pd.read_csv('../input/digit-recognizer/sample_submission.csv')\n",
    "sample_submission['Label'] = y_pred\n",
    "sample_submission.to_csv('submission.csv',index=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1575.559032,
   "end_time": "2023-03-11T03:13:44.772372",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2023-03-11T02:47:29.213340",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
